[build-system]
requires = ["setuptools >= 64"]
build-backend = "setuptools.build_meta"

[project]
name = "neat"
dynamic = ["version"]
authors = [
  { name="CoolCat467", email="CoolCat467@duck.com" },
  { name="Code-Bullet" },
]
description = "This is a Python3 Implementation of Code-Bullets NEAT Template, originally programmed in JavaScript. This is intended to be used to easily add an AI to a game."
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords = ["ai", "neat"]
dependencies = []

[tool.setuptools.dynamic]
version = {attr = "neat.neat.__version__"}

[project.urls]
"Homepage" = "https://github.com/CoolCat467/NEAT-Template-Python"
"Source" = "https://github.com/CoolCat467/NEAT-Template-Python"
"Bug Tracker" = "https://github.com/CoolCat467/NEAT-Template-Python/issues"

[tool.setuptools.package-data]
neat = ["py.typed"]

[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_column_numbers = true
show_error_codes = true
show_traceback = true
strict = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff.isort]
combine-as-imports = true

[tool.pycln]
all = true
disable_all_dunder_policy = true

[tool.black]
line-length = 79
target-version = ["py39"]

[tool.ruff]
line-length = 79
fix = true

include = ["*.py", "*.pyi", "**/pyproject.toml"]

select = [
    "A",     # flake8-builtins
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "E",     # Error
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "I",     # isort
    "N",     # pep8-naming
    "PIE",   # flake8-pie
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "TCH",   # flake8-type-checking
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020
]
extend-ignore = [
    "E501",  # line-too-long conflicts with black
    "S101",  # use of assert for tests and type narrowing
    "D203",  # One blank line before class
    "D211",  # no-blank-line-before-class
    "D213",  # multi-line-summary-second-line
#    "E203",  # conflicts with black
#    "E402",  # module level import not at top of file
    "SIM117", # Use multiple with statements at the same time
    "D417",   # "Missing argument descriptions"
]

[tool.ruff.per-file-ignores]
"src/neat/neat.py" = [
    "S311",  # Not using random for cryptographic purposes
]
"tests/*" = [
    "D100",  # undocumented-public-module
    "D103",  # undocumented-public-function
]

[tool.pytest.ini_options]
addopts = "--cov-report term-missing --cov=neat"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = []

[tool.coverage.report]
precision = 1
skip_covered = true
exclude_also = [
    "pragma: no cover",
    "abc.abstractmethod",
    "if TYPE_CHECKING.*:",
    "if _t.TYPE_CHECKING:",
    "if t.TYPE_CHECKING:",
    "@overload",
    'class .*\bProtocol\b.*\):',
    "raise NotImplementedError",
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py39, py310, py311, py312, pytest, mypy
    isolated_build = false

    [gh-actions]
    python =
        3.9: py39, pytest
        3.10: py310, pytest
        3.11: py311, pytest
        3.12: py312, mypy, pytest

    [testenv]
    setenv =
        PYTHONPATH = {toxinidir}

    [testenv:pytest]
    deps =
        pytest
        pytest-cov
    commands = pytest --basetemp={envtmpdir}

    [testenv:mypy]
    deps =
        mypy
    commands = mypy src
"""
